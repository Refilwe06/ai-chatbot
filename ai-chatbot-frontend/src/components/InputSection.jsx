import React, { useContext, useState } from 'react'
import Text from './Text'
import getIconPath from '../utilities/getIcons'
import useChatAPI from '../hooks/useChatAPI';
import Icon from './Icon';
import { ChatContext } from '../context/ChatContext'
import { UserContext } from '../context/UserContext';
import { STATIC_SUGGESTIONS } from '../staticData/sampleData';
import { useLoader } from '../context/LoaderContext';
import { useNavigate } from 'react-router-dom';
const InputSection = ({ session_id = null }) => {
    const [text, setText] = useState('');
    const { user } = useContext(UserContext);
    const { sendMessage } = useChatAPI(user?.user_id, localStorage.getItem('token'));
    const { setChatData, chatData } = useContext(ChatContext);
    const [hideChatSuggestions, setHideChatSuggestions] = useState(false);
    const { showLoader, hideLoader } = useLoader();
    const navigate = useNavigate();

    const handleSubmitMessage = () => {
        if (!text) alert('Prompt cannot be empty');
        showLoader();
        sendMessage({
            "prompt": text,
            "user_id": 1,
            "session_id": session_id
        }).then((response) => {
            setChatData([...response, ...chatData]);
            if (!session_id) navigate(`/view-chat/${response[0].session_id}`)
        }).catch((err) => {
            console.log(err);
            alert(err.message);
        }).finally(() => {
            setText('');
            setHideChatSuggestions(false);
            hideLoader()
        })
    }

    const handleSuggestionClick = (suggestion) => {
        setText(suggestion);

        showLoader();
        sendMessage({
            "prompt": suggestion,
            "user_id": 1,
            "session_id": session_id
        }).then((response) => {
            setChatData([...response, ...chatData]);
            if (!session_id) navigate(`/view-chat/${response[0].session_id}`)
        }).catch((err) => {
            console.log(err);
            alert(err.message);
        }).finally(() => {
            setText('');
            setHideChatSuggestions(false);
            hideLoader()
        })

    }

    return (
        <div className="flex flex-col bottom-section">
            <div className="chat-suggestions flex flex-col" style={{ display: (hideChatSuggestions) ? 'none' : 'flex' }}>
                <Text text={'Chat Suggestions'} fontSize={14} fontWeight='500' color='#6a6b70' />
                <div className="flex space-between">
                    <div className="suggestion-list flex">
                        {
                            [...STATIC_SUGGESTIONS].map((suggestion, index) => {
                                return <div key={index} className="suggestion flex flex-col items-center pointer" style={{ background: text === suggestion ? '#ececed' : '' }} onClick={() => handleSuggestionClick(suggestion)}>
                                    <Text text={suggestion} fontSize={12} color='#6a6b70' fontWeight='500' />
                                </div>
                            })
                        }
                    </div>
                    <div className="close-circle-icon flex flex-col items-center round pointer" onClick={() => setHideChatSuggestions(true)}>
                        <Icon path={getIconPath('close')} height={20} width={20} strokeWidth={2} />
                    </div>
                </div>
            </div>
            <div className="input-container">
                <input type="text" placeholder='Write Coding about new HTML Tags' width={'100%'} onChange={(e) => setText(e.target.value)} value={text} />
                <div className="input-icons flex absolute" style={{ top: session_id && '50%' }}>
                    <Icon width={22} height={22} path={getIconPath('microphone')} strokeWidth={1.7} color='#5d5d65' classes='pointer' />
                    <Icon width={20} height={20} path={getIconPath('paper_plane')} strokeWidth={1.7} color='#5d5d65' classes='paper-plane-icon pointer' onClick={() => handleSubmitMessage()} />
                </div>
                <div className="items-center disclaimer" style={{ display: session_id ? 'none' : 'flex' }}>
                    <span className='text'>All the results are generated by AI, if you get any wrong answers <span style={{ textDecoration: 'underline', fontWeight: 500 }}>report here</span> </span>
                </div>
            </div>
            <div style={{ display: session_id ? 'flex' : 'none' }} className="flex-col items-center">
                <Text text={'Superpage AI Chat V1.2'} fontSize={12} fontWeight={500} color='#5d5d65' className={'app-version'} />
            </div>
        </div>
    )
}

export default InputSection